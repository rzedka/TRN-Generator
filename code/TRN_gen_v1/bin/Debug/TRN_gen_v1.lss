
bin\Debug\TRN_gen_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000948  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000948  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  0080014a  0080014a  00000a46  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c0  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000222  00000000  00000000  00000b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a4  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b3  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000891  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028a  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 39       	cpi	r26, 0x97	; 151
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  9e:	0c 94 a2 04 	jmp	0x944	; 0x944 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_setup>:
#include "adc.h"



void ADC_setup(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    //ADMUX |= (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
    /// AREF pin = Reference, ADC0 input pin, Left Adjusted result (only 8 MSbits are valid)

    ADMUX |= (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
  ae:	ac e7       	ldi	r26, 0x7C	; 124
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 93       	st	X, r24
    /// AREF pin = Reference, ADC0 input pin, Right Adjusted result (10 MSbits are valid)
    ADCSRA |= (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(0<<ADPS1)|(1<<ADPS0);
  ba:	aa e7       	ldi	r26, 0x7A	; 122
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8d 68       	ori	r24, 0x8D	; 141
  c6:	8c 93       	st	X, r24
    /// ADC Enabled,,  f_clk_adc = 500 kHz (P = 32), autotriggering OFF
    /// =============== MAXIMUM F_CLK_ADC = 1 MHz !!!! ===================================
    /// ADC Interrupt Enabled, Auto-triggering Enabled,

    ADCSRB |= (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
  c8:	ab e7       	ldi	r26, 0x7B	; 123
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	eb e7       	ldi	r30, 0x7B	; 123
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8c 93       	st	X, r24
    /// ADC conversion Starts by triggering it manually
}
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <ADC_get_flag>:

uint8_t ADC_get_flag(void)
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <ADC_get_flag+0x6>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
    uint16_t val = 0;
  e4:	1a 82       	std	Y+2, r1	; 0x02
  e6:	19 82       	std	Y+1, r1	; 0x01
    ADCSRA &= ~(1<<ADIE); // disable USART RX interrupt
  e8:	aa e7       	ldi	r26, 0x7A	; 122
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	8c 93       	st	X, r24
    val = adc_flag;
  f6:	80 91 7d 01 	lds	r24, 0x017D
  fa:	88 2f       	mov	r24, r24
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
    ADCSRA |= (1<<ADIE); // enable
 102:	aa e7       	ldi	r26, 0x7A	; 122
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	8c 93       	st	X, r24
    return val;
 110:	89 81       	ldd	r24, Y+1	; 0x01
}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

0000011c <__vector_21>:

/// ================== INTERRUPT SERVICE ROUTINE ===============================


ISR(ADC_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
    /// Conversion Completed:
    //adc_value = ADCL;
    //adc_value = ADCH;

    adc_value = ADCL;
 13a:	e8 e7       	ldi	r30, 0x78	; 120
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 7f 01 	sts	0x017F, r25
 148:	80 93 7e 01 	sts	0x017E, r24
    adc_value |= ADCH<<8;
 14c:	e9 e7       	ldi	r30, 0x79	; 121
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	98 2f       	mov	r25, r24
 158:	88 27       	eor	r24, r24
 15a:	9c 01       	movw	r18, r24
 15c:	80 91 7e 01 	lds	r24, 0x017E
 160:	90 91 7f 01 	lds	r25, 0x017F
 164:	82 2b       	or	r24, r18
 166:	93 2b       	or	r25, r19
 168:	90 93 7f 01 	sts	0x017F, r25
 16c:	80 93 7e 01 	sts	0x017E, r24
    /*
    if(adc_flag)
        adc_flag = 0;
    else
        adc_flag = 1;*/
    adc_flag++;
 170:	80 91 7d 01 	lds	r24, 0x017D
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 7d 01 	sts	0x017D, r24
}
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <GPIO_setup>:
#include "gpio.h"

void GPIO_setup(void)
{
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
    DDRLED0 |= (1<<LED0_PIN);   // output
 19c:	a4 e2       	ldi	r26, 0x24	; 36
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	e4 e2       	ldi	r30, 0x24	; 36
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	8c 93       	st	X, r24
    PORTLED &= ~(1<<LED0_PIN); // LED0 OFF
 1aa:	a5 e2       	ldi	r26, 0x25	; 37
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e5 e2       	ldi	r30, 0x25	; 37
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8f 7d       	andi	r24, 0xDF	; 223
 1b6:	8c 93       	st	X, r24

    //DDRLED1 |= (1<<LED1_PIN);   // output
    //PORTLED0 &= ~(1<<LED1_PIN); // LED0 OFF

    //led_flag = 0;
}
 1b8:	cf 91       	pop	r28
 1ba:	df 91       	pop	r29
 1bc:	08 95       	ret

000001be <main>:
volatile uint8_t uart_char_idx;

unsigned char uart_rx_array[50];

int main(void)
{
 1be:	df 93       	push	r29
 1c0:	cf 93       	push	r28
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	e6 97       	sbiw	r28, 0x36	; 54
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
    uint16_t ref_timer0 = 0;
 1d2:	1a 86       	std	Y+10, r1	; 0x0a
 1d4:	19 86       	std	Y+9, r1	; 0x09
    uint16_t ref_timer1 = 0;
 1d6:	18 86       	std	Y+8, r1	; 0x08
 1d8:	1f 82       	std	Y+7, r1	; 0x07

    uint8_t uart_flag_f = 0; /// UART flag follower
 1da:	1e 82       	std	Y+6, r1	; 0x06
    uint8_t adc_flag_f = 0; /// ADC flag follower
 1dc:	1d 82       	std	Y+5, r1	; 0x05

    uint8_t CMD_flag = 0;
 1de:	1b 86       	std	Y+11, r1	; 0x0b

    uint16_t sys_flag = 0;
 1e0:	1c 82       	std	Y+4, r1	; 0x04
 1e2:	1b 82       	std	Y+3, r1	; 0x03

    uint16_t adc_period = T_ADC;
 1e4:	84 e6       	ldi	r24, 0x64	; 100
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9a 83       	std	Y+2, r25	; 0x02
 1ea:	89 83       	std	Y+1, r24	; 0x01

    timer0_cnt = 0;
 1ec:	10 92 96 01 	sts	0x0196, r1
 1f0:	10 92 95 01 	sts	0x0195, r1
    adc_flag = 0;
 1f4:	10 92 7d 01 	sts	0x017D, r1
    adc_value = 0;
 1f8:	10 92 7f 01 	sts	0x017F, r1
 1fc:	10 92 7e 01 	sts	0x017E, r1
    uart_flag = 0;
 200:	10 92 4a 01 	sts	0x014A, r1
    uart_char_idx = 0;
 204:	10 92 94 01 	sts	0x0194, r1
    memset(rx_array,'\0',20);
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	44 e1       	ldi	r20, 0x14	; 20
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	0e 94 45 04 	call	0x88a	; 0x88a <memset>

    char buffer[5];
    memset(buffer,'\0',5);
 218:	ce 01       	movw	r24, r28
 21a:	0c 96       	adiw	r24, 0x0c	; 12
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	45 e0       	ldi	r20, 0x05	; 5
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	0e 94 45 04 	call	0x88a	; 0x88a <memset>
    char CMD_head[5] = {0,0,0,0,0};
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	fe 01       	movw	r30, r28
 22c:	71 96       	adiw	r30, 0x11	; 17
 22e:	df 01       	movw	r26, r30
 230:	28 2f       	mov	r18, r24
 232:	1d 92       	st	X+, r1
 234:	2a 95       	dec	r18
 236:	e9 f7       	brne	.-6      	; 0x232 <main+0x74>
    char CMD_word[33];
    memset(CMD_word,'\0',33); /// clear array
 238:	ce 01       	movw	r24, r28
 23a:	46 96       	adiw	r24, 0x16	; 22
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	41 e2       	ldi	r20, 0x21	; 33
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	0e 94 45 04 	call	0x88a	; 0x88a <memset>


    GPIO_setup();
 248:	0e 94 ca 00 	call	0x194	; 0x194 <GPIO_setup>
    TIMER0_setup(); /// 1 kHz with OCRA interrupt
 24c:	0e 94 0a 02 	call	0x414	; 0x414 <TIMER0_setup>
    ADC_setup(); /// Set ADC in ATmega324p for manual conversion start
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_setup>
    USART_init();
 254:	0e 94 49 02 	call	0x492	; 0x492 <USART_init>



    USART_TX_STRING_WAIT("TRN Generator v1.0\n");
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 99 02 	call	0x532	; 0x532 <USART_TX_STRING_WAIT>

    sei(); /// Main interrupt enable flag SET
 260:	78 94       	sei

    while(1){

        /// LED blink process:
        if( (TIMER0_get_value() - ref_timer0) >= T_IDLE){
 262:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <TIMER0_get_value>
 266:	29 85       	ldd	r18, Y+9	; 0x09
 268:	3a 85       	ldd	r19, Y+10	; 0x0a
 26a:	82 1b       	sub	r24, r18
 26c:	93 0b       	sbc	r25, r19
 26e:	a1 e0       	ldi	r26, 0x01	; 1
 270:	84 3f       	cpi	r24, 0xF4	; 244
 272:	9a 07       	cpc	r25, r26
 274:	60 f0       	brcs	.+24     	; 0x28e <main+0xd0>
            ref_timer0 = TIMER0_get_value();
 276:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <TIMER0_get_value>
 27a:	9a 87       	std	Y+10, r25	; 0x0a
 27c:	89 87       	std	Y+9, r24	; 0x09
            PORTLED ^= (1 << LED0_PIN);
 27e:	a5 e2       	ldi	r26, 0x25	; 37
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	e5 e2       	ldi	r30, 0x25	; 37
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	90 81       	ld	r25, Z
 288:	80 e2       	ldi	r24, 0x20	; 32
 28a:	89 27       	eor	r24, r25
 28c:	8c 93       	st	X, r24
        }


        /// ADC conversion trigger process:
        if( (TIMER0_get_value() - ref_timer1) >= adc_period){
 28e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <TIMER0_get_value>
 292:	9c 01       	movw	r18, r24
 294:	8f 81       	ldd	r24, Y+7	; 0x07
 296:	98 85       	ldd	r25, Y+8	; 0x08
 298:	28 1b       	sub	r18, r24
 29a:	39 0b       	sbc	r19, r25
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	28 17       	cp	r18, r24
 2a2:	39 07       	cpc	r19, r25
 2a4:	88 f0       	brcs	.+34     	; 0x2c8 <main+0x10a>
            ref_timer1 = TIMER0_get_value();
 2a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <TIMER0_get_value>
 2aa:	98 87       	std	Y+8, r25	; 0x08
 2ac:	8f 83       	std	Y+7, r24	; 0x07

            if(sys_flag&(1<<SYS_ADC)){
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	9c 81       	ldd	r25, Y+4	; 0x04
 2b2:	81 70       	andi	r24, 0x01	; 1
 2b4:	90 70       	andi	r25, 0x00	; 0
 2b6:	88 23       	and	r24, r24
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <main+0x10a>
                ADCSRA |= (1<<ADSC); /// A/D CONVERSION START
 2ba:	aa e7       	ldi	r26, 0x7A	; 122
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	ea e7       	ldi	r30, 0x7A	; 122
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	80 64       	ori	r24, 0x40	; 64
 2c6:	8c 93       	st	X, r24
            }
        }


        /// ADC conversion finished process:
        if( (ADC_get_flag() - adc_flag_f)){
 2c8:	0e 94 6d 00 	call	0xda	; 0xda <ADC_get_flag>
 2cc:	98 2f       	mov	r25, r24
 2ce:	8d 81       	ldd	r24, Y+5	; 0x05
 2d0:	98 17       	cp	r25, r24
 2d2:	a1 f0       	breq	.+40     	; 0x2fc <main+0x13e>
            adc_flag_f = ADC_get_flag();
 2d4:	0e 94 6d 00 	call	0xda	; 0xda <ADC_get_flag>
 2d8:	8d 83       	std	Y+5, r24	; 0x05
            //USART_TX_STRING_WAIT("ADC = ");
            USART_TX_STRING_WAIT(itoa(adc_value, buffer, 10));
 2da:	80 91 7e 01 	lds	r24, 0x017E
 2de:	90 91 7f 01 	lds	r25, 0x017F
 2e2:	9e 01       	movw	r18, r28
 2e4:	24 5f       	subi	r18, 0xF4	; 244
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	b9 01       	movw	r22, r18
 2ea:	4a e0       	ldi	r20, 0x0A	; 10
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <itoa>
 2f2:	0e 94 99 02 	call	0x532	; 0x532 <USART_TX_STRING_WAIT>
            //USART_TX_WAIT('\n');
            USART_TX_WAIT(',');
 2f6:	8c e2       	ldi	r24, 0x2C	; 44
 2f8:	0e 94 82 02 	call	0x504	; 0x504 <USART_TX_WAIT>
        }



        /// UART Message received:
        if( (USART_get_flag() - uart_flag_f)){
 2fc:	0e 94 c4 02 	call	0x588	; 0x588 <USART_get_flag>
 300:	98 2f       	mov	r25, r24
 302:	8e 81       	ldd	r24, Y+6	; 0x06
 304:	98 17       	cp	r25, r24
 306:	09 f4       	brne	.+2      	; 0x30a <main+0x14c>
 308:	ac cf       	rjmp	.-168    	; 0x262 <main+0xa4>
            uart_flag_f = USART_get_flag();
 30a:	0e 94 c4 02 	call	0x588	; 0x588 <USART_get_flag>
 30e:	8e 83       	std	Y+6, r24	; 0x06

            //PORTLED ^= (1 << LED0_PIN);

            UART_RX_FCN(&CMD_flag, CMD_head, CMD_word);
 310:	ce 01       	movw	r24, r28
 312:	0b 96       	adiw	r24, 0x0b	; 11
 314:	9e 01       	movw	r18, r28
 316:	2f 5e       	subi	r18, 0xEF	; 239
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	ae 01       	movw	r20, r28
 31c:	4a 5e       	subi	r20, 0xEA	; 234
 31e:	5f 4f       	sbci	r21, 0xFF	; 255
 320:	b9 01       	movw	r22, r18
 322:	0e 94 e5 02 	call	0x5ca	; 0x5ca <UART_RX_FCN>

            if(CMD_flag&0x01){
 326:	8b 85       	ldd	r24, Y+11	; 0x0b
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	81 70       	andi	r24, 0x01	; 1
 32e:	90 70       	andi	r25, 0x00	; 0
 330:	88 23       	and	r24, r24
 332:	69 f0       	breq	.+26     	; 0x34e <main+0x190>
                /// Toggle periodic AD conversion process:
                sys_flag ^= (1<<SYS_ADC);
 334:	2b 81       	ldd	r18, Y+3	; 0x03
 336:	3c 81       	ldd	r19, Y+4	; 0x04
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	82 27       	eor	r24, r18
 33e:	93 27       	eor	r25, r19
 340:	9c 83       	std	Y+4, r25	; 0x04
 342:	8b 83       	std	Y+3, r24	; 0x03
                USART_TX_STRING_WAIT("Toggle ADC\n");
 344:	84 e1       	ldi	r24, 0x14	; 20
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 99 02 	call	0x532	; 0x532 <USART_TX_STRING_WAIT>
 34c:	1e c0       	rjmp	.+60     	; 0x38a <main+0x1cc>

            }else if(CMD_flag&0x02){
 34e:	8b 85       	ldd	r24, Y+11	; 0x0b
 350:	88 2f       	mov	r24, r24
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	82 70       	andi	r24, 0x02	; 2
 356:	90 70       	andi	r25, 0x00	; 0
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	b9 f0       	breq	.+46     	; 0x38a <main+0x1cc>
                /// Set new AD conversion time period:
                adc_period = atoi(CMD_word);
 35c:	ce 01       	movw	r24, r28
 35e:	46 96       	adiw	r24, 0x16	; 22
 360:	0e 94 27 04 	call	0x84e	; 0x84e <atoi>
 364:	9a 83       	std	Y+2, r25	; 0x02
 366:	89 83       	std	Y+1, r24	; 0x01
                if(adc_period == 0){
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	00 97       	sbiw	r24, 0x00	; 0
 36e:	49 f4       	brne	.+18     	; 0x382 <main+0x1c4>
                    /// In case of NaN input override with default T_ADC
                    adc_period = T_ADC;
 370:	84 e6       	ldi	r24, 0x64	; 100
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	9a 83       	std	Y+2, r25	; 0x02
 376:	89 83       	std	Y+1, r24	; 0x01
                    USART_TX_STRING_WAIT("ADPD\n");
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 99 02 	call	0x532	; 0x532 <USART_TX_STRING_WAIT>
 380:	04 c0       	rjmp	.+8      	; 0x38a <main+0x1cc>
                }else{
                    USART_TX_STRING_WAIT("ADPU\n");
 382:	86 e2       	ldi	r24, 0x26	; 38
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 99 02 	call	0x532	; 0x532 <USART_TX_STRING_WAIT>
                }
            }else{
                /// nothing
            }

            CMD_flag = 0;
 38a:	1b 86       	std	Y+11, r1	; 0x0b
 38c:	6a cf       	rjmp	.-300    	; 0x262 <main+0xa4>

0000038e <SPI_setup>:

#include "spi.h"

void SPI_setup(void)
{
 38e:	df 93       	push	r29
 390:	cf 93       	push	r28
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
    //SPCR0 |= ();
    /// F_CPU = 16 MHz
    /// Set SCK speed, type of Endian, Edges, etc..
SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR1)|(1<<SPR0); ///SPI control REG.
 396:	ec e4       	ldi	r30, 0x4C	; 76
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	83 e5       	ldi	r24, 0x53	; 83
 39c:	80 83       	st	Z, r24
/// SPR1 & SPR0 = 00  F_clk/4. = 4 MHz => 250 ns
/// SPR1 & SPR0 = 11  F_clk/128. = 125 kHz => 8 us

//SPSR &= ~(1<<SPI2X); /// DOuble SPI speed is OFF

}
 39e:	cf 91       	pop	r28
 3a0:	df 91       	pop	r29
 3a2:	08 95       	ret

000003a4 <SPI_ByteTransfer>:

uint8_t SPI_ByteTransfer(uint8_t TXData)
{
 3a4:	df 93       	push	r29
 3a6:	cf 93       	push	r28
 3a8:	0f 92       	push	r0
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	89 83       	std	Y+1, r24	; 0x01
    SPDR = TXData; /// First Shift one byte OUT of MOSI
 3b0:	ee e4       	ldi	r30, 0x4E	; 78
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	80 83       	st	Z, r24
    while(!(SPSR & (1<<SPIF)));
 3b8:	ed e4       	ldi	r30, 0x4D	; 77
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	88 23       	and	r24, r24
 3c0:	dc f7       	brge	.-10     	; 0x3b8 <SPI_ByteTransfer+0x14>
    return SPDR; /// Simultanously you get one Byte IN to MISO
 3c2:	ee e4       	ldi	r30, 0x4E	; 78
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
}
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <TIMER0_get_value>:
   TIMSK0 |= (1<<OCIE0A);
   //return val;
}
*/
uint16_t TIMER0_get_value(void)
{
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <TIMER0_get_value+0x6>
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
   uint16_t val = 0;
 3da:	1a 82       	std	Y+2, r1	; 0x02
 3dc:	19 82       	std	Y+1, r1	; 0x01
   TIMSK0 &= ~(1<<OCIE0A);
 3de:	ae e6       	ldi	r26, 0x6E	; 110
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	ee e6       	ldi	r30, 0x6E	; 110
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	8d 7f       	andi	r24, 0xFD	; 253
 3ea:	8c 93       	st	X, r24
   val = timer0_cnt;
 3ec:	80 91 95 01 	lds	r24, 0x0195
 3f0:	90 91 96 01 	lds	r25, 0x0196
 3f4:	9a 83       	std	Y+2, r25	; 0x02
 3f6:	89 83       	std	Y+1, r24	; 0x01
   TIMSK0 |= (1<<OCIE0A);
 3f8:	ae e6       	ldi	r26, 0x6E	; 110
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	ee e6       	ldi	r30, 0x6E	; 110
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	82 60       	ori	r24, 0x02	; 2
 404:	8c 93       	st	X, r24
   return val;
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	9a 81       	ldd	r25, Y+2	; 0x02
}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	08 95       	ret

00000414 <TIMER0_setup>:
  OCR1A = 20010;  /// TIMEOUT for the DCC RX PIN EDGE DETECTION

}
*/
void TIMER0_setup(void)
{
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
    /// Timer0 used for LED blinking

    TCCR0A |= (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(0<<WGM00);
 41c:	a4 e4       	ldi	r26, 0x44	; 68
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e4 e4       	ldi	r30, 0x44	; 68
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	82 60       	ori	r24, 0x02	; 2
 428:	8c 93       	st	X, r24
    /// No output pins enabled.
    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER RUNNING
    TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00); /// TIMER STARTED
 42a:	a5 e4       	ldi	r26, 0x45	; 69
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e5 e4       	ldi	r30, 0x45	; 69
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	83 60       	ori	r24, 0x03	; 3
 436:	8c 93       	st	X, r24
  ///   1       0       0       256
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising

    TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A)|(0<<OCIE0B);/// Output Compare A ISR
 438:	ae e6       	ldi	r26, 0x6E	; 110
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	ee e6       	ldi	r30, 0x6E	; 110
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	82 60       	ori	r24, 0x02	; 2
 444:	8c 93       	st	X, r24
    OCR0A = 249; /// ISR frequency 1.000 kHz
 446:	e7 e4       	ldi	r30, 0x47	; 71
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	89 ef       	ldi	r24, 0xF9	; 249
 44c:	80 83       	st	Z, r24
    //OCR0A = 231; /// for bit "0"

}
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <__vector_14>:
}
*/


ISR(TIMER0_COMPA_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	df 93       	push	r29
 464:	cf 93       	push	r28
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
    cli();
 46a:	f8 94       	cli
    timer0_cnt++;
 46c:	80 91 95 01 	lds	r24, 0x0195
 470:	90 91 96 01 	lds	r25, 0x0196
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 96 01 	sts	0x0196, r25
 47a:	80 93 95 01 	sts	0x0195, r24
    sei();
 47e:	78 94       	sei
}
 480:	cf 91       	pop	r28
 482:	df 91       	pop	r29
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <USART_init>:
#include "uart.h"


void USART_init(void)
{
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
    //UCSR0A |= (0<<U2X0)|(0<<MPCM0);
    //UBRR0H = 0x00;/// has to be written first
    //UBRR0 = 0x67; /// this updates the prescaler.

    /// For 57600 Bd:  (error =-0.8%)
    UCSR0A |= (1<<U2X0);
 49a:	a0 ec       	ldi	r26, 0xC0	; 192
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e0 ec       	ldi	r30, 0xC0	; 192
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	8c 93       	st	X, r24
    UBRR0 = 34;
 4a8:	e4 ec       	ldi	r30, 0xC4	; 196
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	82 e2       	ldi	r24, 0x22	; 34
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	91 83       	std	Z+1, r25	; 0x01
 4b2:	80 83       	st	Z, r24

    UCSR0B |= (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<RXB80)|(0<<TXB80) ;
 4b4:	a1 ec       	ldi	r26, 0xC1	; 193
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	e1 ec       	ldi	r30, 0xC1	; 193
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	88 69       	ori	r24, 0x98	; 152
 4c0:	8c 93       	st	X, r24
    UCSR0C |= (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0) ;
 4c2:	a2 ec       	ldi	r26, 0xC2	; 194
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e2 ec       	ldi	r30, 0xC2	; 194
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	86 60       	ori	r24, 0x06	; 6
 4ce:	8c 93       	st	X, r24
    /// no parity, 8bit data, 1 stop bit, RX complete interrupt, RX enabled, double speed mode DISABLED.
    /// see page 244 of ATMEGA328P datasheet.

}
 4d0:	cf 91       	pop	r28
 4d2:	df 91       	pop	r29
 4d4:	08 95       	ret

000004d6 <USART_RX_WAIT>:


void USART_RX_WAIT(uint8_t *RX_Data)
{
 4d6:	df 93       	push	r29
 4d8:	cf 93       	push	r28
 4da:	00 d0       	rcall	.+0      	; 0x4dc <USART_RX_WAIT+0x6>
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
 4e0:	9a 83       	std	Y+2, r25	; 0x02
 4e2:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x80) != 0x80 ); /// Wait until it receives something
 4e4:	e0 ec       	ldi	r30, 0xC0	; 192
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	88 23       	and	r24, r24
 4ec:	dc f7       	brge	.-10     	; 0x4e4 <USART_RX_WAIT+0xe>
        *RX_Data = UDR0; /// After that, read the data register
 4ee:	e6 ec       	ldi	r30, 0xC6	; 198
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	e9 81       	ldd	r30, Y+1	; 0x01
 4f6:	fa 81       	ldd	r31, Y+2	; 0x02
 4f8:	80 83       	st	Z, r24
}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	cf 91       	pop	r28
 500:	df 91       	pop	r29
 502:	08 95       	ret

00000504 <USART_TX_WAIT>:

void USART_TX_WAIT(uint8_t TX_Data)
{
 504:	df 93       	push	r29
 506:	cf 93       	push	r28
 508:	0f 92       	push	r0
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x20) != 0x20 ); /// Wait until TX buffer ready.
 510:	e0 ec       	ldi	r30, 0xC0	; 192
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	88 2f       	mov	r24, r24
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	80 72       	andi	r24, 0x20	; 32
 51c:	90 70       	andi	r25, 0x00	; 0
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	b9 f3       	breq	.-18     	; 0x510 <USART_TX_WAIT+0xc>
    UDR0 = TX_Data;  /// Send data
 522:	e6 ec       	ldi	r30, 0xC6	; 198
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	80 83       	st	Z, r24
}
 52a:	0f 90       	pop	r0
 52c:	cf 91       	pop	r28
 52e:	df 91       	pop	r29
 530:	08 95       	ret

00000532 <USART_TX_STRING_WAIT>:

void USART_TX_STRING_WAIT(char s[])
{
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	00 d0       	rcall	.+0      	; 0x538 <USART_TX_STRING_WAIT+0x6>
 538:	00 d0       	rcall	.+0      	; 0x53a <USART_TX_STRING_WAIT+0x8>
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	9c 83       	std	Y+4, r25	; 0x04
 540:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i=0;
 542:	1a 82       	std	Y+2, r1	; 0x02
 544:	19 82       	std	Y+1, r1	; 0x01
 546:	0f c0       	rjmp	.+30     	; 0x566 <USART_TX_STRING_WAIT+0x34>
    while( s[i] != '\0'){
        USART_TX_WAIT(s[i]);
 548:	2b 81       	ldd	r18, Y+3	; 0x03
 54a:	3c 81       	ldd	r19, Y+4	; 0x04
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	9a 81       	ldd	r25, Y+2	; 0x02
 550:	f9 01       	movw	r30, r18
 552:	e8 0f       	add	r30, r24
 554:	f9 1f       	adc	r31, r25
 556:	80 81       	ld	r24, Z
 558:	0e 94 82 02 	call	0x504	; 0x504 <USART_TX_WAIT>
        i++;
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	9a 81       	ldd	r25, Y+2	; 0x02
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	9a 83       	std	Y+2, r25	; 0x02
 564:	89 83       	std	Y+1, r24	; 0x01
}

void USART_TX_STRING_WAIT(char s[])
{
    unsigned int i=0;
    while( s[i] != '\0'){
 566:	2b 81       	ldd	r18, Y+3	; 0x03
 568:	3c 81       	ldd	r19, Y+4	; 0x04
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	9a 81       	ldd	r25, Y+2	; 0x02
 56e:	f9 01       	movw	r30, r18
 570:	e8 0f       	add	r30, r24
 572:	f9 1f       	adc	r31, r25
 574:	80 81       	ld	r24, Z
 576:	88 23       	and	r24, r24
 578:	39 f7       	brne	.-50     	; 0x548 <USART_TX_STRING_WAIT+0x16>
        USART_TX_WAIT(s[i]);
        i++;
    }
    //USART_TX_WAIT('\n');
}
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	cf 91       	pop	r28
 584:	df 91       	pop	r29
 586:	08 95       	ret

00000588 <USART_get_flag>:

uint8_t USART_get_flag(void)
{
 588:	df 93       	push	r29
 58a:	cf 93       	push	r28
 58c:	00 d0       	rcall	.+0      	; 0x58e <USART_get_flag+0x6>
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
    uint16_t val = 0;
 592:	1a 82       	std	Y+2, r1	; 0x02
 594:	19 82       	std	Y+1, r1	; 0x01
    UCSR0B &= ~(1<<RXCIE0); // disable USART RX interrupt
 596:	a1 ec       	ldi	r26, 0xC1	; 193
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	e1 ec       	ldi	r30, 0xC1	; 193
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	8f 77       	andi	r24, 0x7F	; 127
 5a2:	8c 93       	st	X, r24
    val = uart_flag;
 5a4:	80 91 4a 01 	lds	r24, 0x014A
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	9a 83       	std	Y+2, r25	; 0x02
 5ae:	89 83       	std	Y+1, r24	; 0x01
    UCSR0B |= (1<<RXCIE0); // enable
 5b0:	a1 ec       	ldi	r26, 0xC1	; 193
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	e1 ec       	ldi	r30, 0xC1	; 193
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	8c 93       	st	X, r24
    return val;
 5be:	89 81       	ldd	r24, Y+1	; 0x01
}
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	08 95       	ret

000005ca <UART_RX_FCN>:


void UART_RX_FCN(uint8_t *UI_flag, char *CMD_head, char *CMD_word)
{
 5ca:	1f 93       	push	r17
 5cc:	df 93       	push	r29
 5ce:	cf 93       	push	r28
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	27 97       	sbiw	r28, 0x07	; 7
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	9b 83       	std	Y+3, r25	; 0x03
 5e2:	8a 83       	std	Y+2, r24	; 0x02
 5e4:	7d 83       	std	Y+5, r23	; 0x05
 5e6:	6c 83       	std	Y+4, r22	; 0x04
 5e8:	5f 83       	std	Y+7, r21	; 0x07
 5ea:	4e 83       	std	Y+6, r20	; 0x06

    uint8_t i=0;
 5ec:	19 82       	std	Y+1, r1	; 0x01
    memset(CMD_head,'\0',5);
 5ee:	8c 81       	ldd	r24, Y+4	; 0x04
 5f0:	9d 81       	ldd	r25, Y+5	; 0x05
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	45 e0       	ldi	r20, 0x05	; 5
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	0e 94 45 04 	call	0x88a	; 0x88a <memset>
    memset(CMD_word,'\0',33);
 5fe:	8e 81       	ldd	r24, Y+6	; 0x06
 600:	9f 81       	ldd	r25, Y+7	; 0x07
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	41 e2       	ldi	r20, 0x21	; 33
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	0e 94 45 04 	call	0x88a	; 0x88a <memset>
    for(i=0;i<4;i++){
 60e:	19 82       	std	Y+1, r1	; 0x01
 610:	13 c0       	rjmp	.+38     	; 0x638 <UART_RX_FCN+0x6e>
        CMD_head[i] = rx_array[i];   /// index 0 - 3
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	9d 81       	ldd	r25, Y+5	; 0x05
 61c:	dc 01       	movw	r26, r24
 61e:	a2 0f       	add	r26, r18
 620:	b3 1f       	adc	r27, r19
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	fc 01       	movw	r30, r24
 62a:	e0 58       	subi	r30, 0x80	; 128
 62c:	fe 4f       	sbci	r31, 0xFE	; 254
 62e:	80 81       	ld	r24, Z
 630:	8c 93       	st	X, r24
{

    uint8_t i=0;
    memset(CMD_head,'\0',5);
    memset(CMD_word,'\0',33);
    for(i=0;i<4;i++){
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	89 83       	std	Y+1, r24	; 0x01
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	84 30       	cpi	r24, 0x04	; 4
 63c:	50 f3       	brcs	.-44     	; 0x612 <UART_RX_FCN+0x48>
 63e:	19 c0       	rjmp	.+50     	; 0x672 <UART_RX_FCN+0xa8>
        CMD_head[i] = rx_array[i];   /// index 0 - 3
    }
    while( rx_array[i]!='\0' ){ /// i = (4 - 35)
        if (i<=36){
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	85 32       	cpi	r24, 0x25	; 37
 644:	f8 f4       	brcc	.+62     	; 0x684 <UART_RX_FCN+0xba>
            CMD_word[i-4] = rx_array[i]; /// index 0 - 31
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	9c 01       	movw	r18, r24
 64e:	24 50       	subi	r18, 0x04	; 4
 650:	30 40       	sbci	r19, 0x00	; 0
 652:	8e 81       	ldd	r24, Y+6	; 0x06
 654:	9f 81       	ldd	r25, Y+7	; 0x07
 656:	dc 01       	movw	r26, r24
 658:	a2 0f       	add	r26, r18
 65a:	b3 1f       	adc	r27, r19
 65c:	89 81       	ldd	r24, Y+1	; 0x01
 65e:	88 2f       	mov	r24, r24
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	e0 58       	subi	r30, 0x80	; 128
 666:	fe 4f       	sbci	r31, 0xFE	; 254
 668:	80 81       	ld	r24, Z
 66a:	8c 93       	st	X, r24
            i++;
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	8f 5f       	subi	r24, 0xFF	; 255
 670:	89 83       	std	Y+1, r24	; 0x01
    memset(CMD_head,'\0',5);
    memset(CMD_word,'\0',33);
    for(i=0;i<4;i++){
        CMD_head[i] = rx_array[i];   /// index 0 - 3
    }
    while( rx_array[i]!='\0' ){ /// i = (4 - 35)
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	fc 01       	movw	r30, r24
 67a:	e0 58       	subi	r30, 0x80	; 128
 67c:	fe 4f       	sbci	r31, 0xFE	; 254
 67e:	80 81       	ld	r24, Z
 680:	88 23       	and	r24, r24
 682:	f1 f6       	brne	.-68     	; 0x640 <UART_RX_FCN+0x76>
            i++;
        }else{
            break;
        }
    }
    if(i > 36){ /// Command length invalid:
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	85 32       	cpi	r24, 0x25	; 37
 688:	40 f0       	brcs	.+16     	; 0x69a <UART_RX_FCN+0xd0>
        USART_TX_STRING_WAIT(" CMD TOO LONG ");
 68a:	8c e2       	ldi	r24, 0x2C	; 44
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	0e 94 99 02 	call	0x532	; 0x532 <USART_TX_STRING_WAIT>
        *UI_flag = 0; /// TEMP IDLE
 692:	ea 81       	ldd	r30, Y+2	; 0x02
 694:	fb 81       	ldd	r31, Y+3	; 0x03
 696:	10 82       	st	Z, r1
 698:	0b c0       	rjmp	.+22     	; 0x6b0 <UART_RX_FCN+0xe6>
    }else{ /// Command length valid: cmd recognition
        *UI_flag |= CMD_Head_lib(CMD_head);
 69a:	ea 81       	ldd	r30, Y+2	; 0x02
 69c:	fb 81       	ldd	r31, Y+3	; 0x03
 69e:	10 81       	ld	r17, Z
 6a0:	8c 81       	ldd	r24, Y+4	; 0x04
 6a2:	9d 81       	ldd	r25, Y+5	; 0x05
 6a4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CMD_Head_lib>
 6a8:	81 2b       	or	r24, r17
 6aa:	ea 81       	ldd	r30, Y+2	; 0x02
 6ac:	fb 81       	ldd	r31, Y+3	; 0x03
 6ae:	80 83       	st	Z, r24
    }
    i=0;
 6b0:	19 82       	std	Y+1, r1	; 0x01

}
 6b2:	27 96       	adiw	r28, 0x07	; 7
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	de bf       	out	0x3e, r29	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	cd bf       	out	0x3d, r28	; 61
 6be:	cf 91       	pop	r28
 6c0:	df 91       	pop	r29
 6c2:	1f 91       	pop	r17
 6c4:	08 95       	ret

000006c6 <CMD_Head_lib>:


uint8_t CMD_Head_lib(char CMD_head[5])
{
 6c6:	df 93       	push	r29
 6c8:	cf 93       	push	r28
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <CMD_Head_lib+0x6>
 6cc:	0f 92       	push	r0
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	9a 83       	std	Y+2, r25	; 0x02
 6d4:	89 83       	std	Y+1, r24	; 0x01

    if(!strcmp(CMD_head,"SAD_")){       /// Toggle ADC periodic conversion
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	9a 81       	ldd	r25, Y+2	; 0x02
 6da:	2b e3       	ldi	r18, 0x3B	; 59
 6dc:	31 e0       	ldi	r19, 0x01	; 1
 6de:	b9 01       	movw	r22, r18
 6e0:	0e 94 4c 04 	call	0x898	; 0x898 <strcmp>
 6e4:	00 97       	sbiw	r24, 0x00	; 0
 6e6:	19 f4       	brne	.+6      	; 0x6ee <CMD_Head_lib+0x28>
        return 0x01;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	8b 83       	std	Y+3, r24	; 0x03
 6ec:	19 c0       	rjmp	.+50     	; 0x720 <CMD_Head_lib+0x5a>
    }else if(!strcmp(CMD_head,"ADS_")){ /// Set ADC conversion period (ms)
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	20 e4       	ldi	r18, 0x40	; 64
 6f4:	31 e0       	ldi	r19, 0x01	; 1
 6f6:	b9 01       	movw	r22, r18
 6f8:	0e 94 4c 04 	call	0x898	; 0x898 <strcmp>
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	19 f4       	brne	.+6      	; 0x706 <CMD_Head_lib+0x40>
        return 0x02;
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	8b 83       	std	Y+3, r24	; 0x03
 704:	0d c0       	rjmp	.+26     	; 0x720 <CMD_Head_lib+0x5a>
    }else if(!strcmp(CMD_head,"STOT")){ /// Stop TEST 1
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	9a 81       	ldd	r25, Y+2	; 0x02
 70a:	25 e4       	ldi	r18, 0x45	; 69
 70c:	31 e0       	ldi	r19, 0x01	; 1
 70e:	b9 01       	movw	r22, r18
 710:	0e 94 4c 04 	call	0x898	; 0x898 <strcmp>
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	19 f4       	brne	.+6      	; 0x71e <CMD_Head_lib+0x58>
        return 0x04;
 718:	84 e0       	ldi	r24, 0x04	; 4
 71a:	8b 83       	std	Y+3, r24	; 0x03
 71c:	01 c0       	rjmp	.+2      	; 0x720 <CMD_Head_lib+0x5a>
    }else{ /// Unknown Command
        return 0x00;
 71e:	1b 82       	std	Y+3, r1	; 0x03
 720:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	cf 91       	pop	r28
 72a:	df 91       	pop	r29
 72c:	08 95       	ret

0000072e <__vector_18>:




ISR(USART_RX_vect) /// ====================== UART DATA RECEPTION ===============================================
{ /// UART RX complete Interrupt:
 72e:	1f 92       	push	r1
 730:	0f 92       	push	r0
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	5f 93       	push	r21
 740:	6f 93       	push	r22
 742:	7f 93       	push	r23
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
 750:	df 93       	push	r29
 752:	cf 93       	push	r28
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
    cli();
 758:	f8 94       	cli

    /// UART TERMINAL SETTINGS:
    /// - every message must be terminated with CR+LF (0x0D 0x0A)

    /// All the variables
    if(uart_char_idx > 99){
 75a:	80 91 94 01 	lds	r24, 0x0194
 75e:	84 36       	cpi	r24, 0x64	; 100
 760:	70 f0       	brcs	.+28     	; 0x77e <__vector_18+0x50>
        uart_char_idx=0; /// Start overwriting the beginning
 762:	10 92 94 01 	sts	0x0194, r1
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 766:	80 91 94 01 	lds	r24, 0x0194
 76a:	88 2f       	mov	r24, r24
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	e6 ec       	ldi	r30, 0xC6	; 198
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	20 81       	ld	r18, Z
 774:	fc 01       	movw	r30, r24
 776:	e0 58       	subi	r30, 0x80	; 128
 778:	fe 4f       	sbci	r31, 0xFE	; 254
 77a:	20 83       	st	Z, r18
 77c:	54 c0       	rjmp	.+168    	; 0x826 <__vector_18+0xf8>
    }else if(uart_char_idx == 0){
 77e:	80 91 94 01 	lds	r24, 0x0194
 782:	88 23       	and	r24, r24
 784:	c9 f4       	brne	.+50     	; 0x7b8 <__vector_18+0x8a>
        memset(rx_array,'\0',20);
 786:	80 e8       	ldi	r24, 0x80	; 128
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	44 e1       	ldi	r20, 0x14	; 20
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	0e 94 45 04 	call	0x88a	; 0x88a <memset>
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 796:	80 91 94 01 	lds	r24, 0x0194
 79a:	88 2f       	mov	r24, r24
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	e6 ec       	ldi	r30, 0xC6	; 198
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	20 81       	ld	r18, Z
 7a4:	fc 01       	movw	r30, r24
 7a6:	e0 58       	subi	r30, 0x80	; 128
 7a8:	fe 4f       	sbci	r31, 0xFE	; 254
 7aa:	20 83       	st	Z, r18
        uart_char_idx++;
 7ac:	80 91 94 01 	lds	r24, 0x0194
 7b0:	8f 5f       	subi	r24, 0xFF	; 255
 7b2:	80 93 94 01 	sts	0x0194, r24
 7b6:	37 c0       	rjmp	.+110    	; 0x826 <__vector_18+0xf8>
    }else{
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 7b8:	80 91 94 01 	lds	r24, 0x0194
 7bc:	88 2f       	mov	r24, r24
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	e6 ec       	ldi	r30, 0xC6	; 198
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	20 81       	ld	r18, Z
 7c6:	fc 01       	movw	r30, r24
 7c8:	e0 58       	subi	r30, 0x80	; 128
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
 7cc:	20 83       	st	Z, r18
        if(rx_array[uart_char_idx] == 0x0A){ /// end of the CMD (CR char)
 7ce:	80 91 94 01 	lds	r24, 0x0194
 7d2:	88 2f       	mov	r24, r24
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	fc 01       	movw	r30, r24
 7d8:	e0 58       	subi	r30, 0x80	; 128
 7da:	fe 4f       	sbci	r31, 0xFE	; 254
 7dc:	80 81       	ld	r24, Z
 7de:	8a 30       	cpi	r24, 0x0A	; 10
 7e0:	e9 f4       	brne	.+58     	; 0x81c <__vector_18+0xee>
            rx_array[uart_char_idx] = 0x00; // erase 0x0A
 7e2:	80 91 94 01 	lds	r24, 0x0194
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	fc 01       	movw	r30, r24
 7ec:	e0 58       	subi	r30, 0x80	; 128
 7ee:	fe 4f       	sbci	r31, 0xFE	; 254
 7f0:	10 82       	st	Z, r1
            rx_array[--uart_char_idx] = 0x00; // erase 0x0D
 7f2:	80 91 94 01 	lds	r24, 0x0194
 7f6:	81 50       	subi	r24, 0x01	; 1
 7f8:	80 93 94 01 	sts	0x0194, r24
 7fc:	80 91 94 01 	lds	r24, 0x0194
 800:	88 2f       	mov	r24, r24
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	fc 01       	movw	r30, r24
 806:	e0 58       	subi	r30, 0x80	; 128
 808:	fe 4f       	sbci	r31, 0xFE	; 254
 80a:	10 82       	st	Z, r1
            uart_flag ++; /// this variable increments each ISR. It is followed by another variable in the main.
 80c:	80 91 4a 01 	lds	r24, 0x014A
 810:	8f 5f       	subi	r24, 0xFF	; 255
 812:	80 93 4a 01 	sts	0x014A, r24
            /// The change of "uart_flag" triggers Command recognition procedure.
            /// However, "uart_flag" can never be modified outside this ISR! It can only be read.
            uart_char_idx = 0;
 816:	10 92 94 01 	sts	0x0194, r1
 81a:	05 c0       	rjmp	.+10     	; 0x826 <__vector_18+0xf8>

        }else{
            uart_char_idx++;
 81c:	80 91 94 01 	lds	r24, 0x0194
 820:	8f 5f       	subi	r24, 0xFF	; 255
 822:	80 93 94 01 	sts	0x0194, r24
        }
    }
    sei();
 826:	78 94       	sei
}
 828:	cf 91       	pop	r28
 82a:	df 91       	pop	r29
 82c:	ff 91       	pop	r31
 82e:	ef 91       	pop	r30
 830:	bf 91       	pop	r27
 832:	af 91       	pop	r26
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	7f 91       	pop	r23
 83a:	6f 91       	pop	r22
 83c:	5f 91       	pop	r21
 83e:	4f 91       	pop	r20
 840:	3f 91       	pop	r19
 842:	2f 91       	pop	r18
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	0f 90       	pop	r0
 84a:	1f 90       	pop	r1
 84c:	18 95       	reti

0000084e <atoi>:
 84e:	fc 01       	movw	r30, r24
 850:	88 27       	eor	r24, r24
 852:	99 27       	eor	r25, r25
 854:	e8 94       	clt
 856:	21 91       	ld	r18, Z+
 858:	20 32       	cpi	r18, 0x20	; 32
 85a:	e9 f3       	breq	.-6      	; 0x856 <atoi+0x8>
 85c:	29 30       	cpi	r18, 0x09	; 9
 85e:	10 f0       	brcs	.+4      	; 0x864 <atoi+0x16>
 860:	2e 30       	cpi	r18, 0x0E	; 14
 862:	c8 f3       	brcs	.-14     	; 0x856 <atoi+0x8>
 864:	2b 32       	cpi	r18, 0x2B	; 43
 866:	41 f0       	breq	.+16     	; 0x878 <atoi+0x2a>
 868:	2d 32       	cpi	r18, 0x2D	; 45
 86a:	39 f4       	brne	.+14     	; 0x87a <atoi+0x2c>
 86c:	68 94       	set
 86e:	04 c0       	rjmp	.+8      	; 0x878 <atoi+0x2a>
 870:	0e 94 76 04 	call	0x8ec	; 0x8ec <__mulhi_const_10>
 874:	82 0f       	add	r24, r18
 876:	91 1d       	adc	r25, r1
 878:	21 91       	ld	r18, Z+
 87a:	20 53       	subi	r18, 0x30	; 48
 87c:	2a 30       	cpi	r18, 0x0A	; 10
 87e:	c0 f3       	brcs	.-16     	; 0x870 <atoi+0x22>
 880:	1e f4       	brtc	.+6      	; 0x888 <atoi+0x3a>
 882:	90 95       	com	r25
 884:	81 95       	neg	r24
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <memset>:
 88a:	dc 01       	movw	r26, r24
 88c:	01 c0       	rjmp	.+2      	; 0x890 <memset+0x6>
 88e:	6d 93       	st	X+, r22
 890:	41 50       	subi	r20, 0x01	; 1
 892:	50 40       	sbci	r21, 0x00	; 0
 894:	e0 f7       	brcc	.-8      	; 0x88e <memset+0x4>
 896:	08 95       	ret

00000898 <strcmp>:
 898:	fb 01       	movw	r30, r22
 89a:	dc 01       	movw	r26, r24
 89c:	8d 91       	ld	r24, X+
 89e:	01 90       	ld	r0, Z+
 8a0:	80 19       	sub	r24, r0
 8a2:	01 10       	cpse	r0, r1
 8a4:	d9 f3       	breq	.-10     	; 0x89c <strcmp+0x4>
 8a6:	99 0b       	sbc	r25, r25
 8a8:	08 95       	ret

000008aa <itoa>:
 8aa:	fb 01       	movw	r30, r22
 8ac:	9f 01       	movw	r18, r30
 8ae:	e8 94       	clt
 8b0:	42 30       	cpi	r20, 0x02	; 2
 8b2:	c4 f0       	brlt	.+48     	; 0x8e4 <itoa+0x3a>
 8b4:	45 32       	cpi	r20, 0x25	; 37
 8b6:	b4 f4       	brge	.+44     	; 0x8e4 <itoa+0x3a>
 8b8:	4a 30       	cpi	r20, 0x0A	; 10
 8ba:	29 f4       	brne	.+10     	; 0x8c6 <itoa+0x1c>
 8bc:	97 fb       	bst	r25, 7
 8be:	1e f4       	brtc	.+6      	; 0x8c6 <itoa+0x1c>
 8c0:	90 95       	com	r25
 8c2:	81 95       	neg	r24
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	64 2f       	mov	r22, r20
 8c8:	77 27       	eor	r23, r23
 8ca:	0e 94 8e 04 	call	0x91c	; 0x91c <__udivmodhi4>
 8ce:	80 5d       	subi	r24, 0xD0	; 208
 8d0:	8a 33       	cpi	r24, 0x3A	; 58
 8d2:	0c f0       	brlt	.+2      	; 0x8d6 <itoa+0x2c>
 8d4:	89 5d       	subi	r24, 0xD9	; 217
 8d6:	81 93       	st	Z+, r24
 8d8:	cb 01       	movw	r24, r22
 8da:	00 97       	sbiw	r24, 0x00	; 0
 8dc:	a1 f7       	brne	.-24     	; 0x8c6 <itoa+0x1c>
 8de:	16 f4       	brtc	.+4      	; 0x8e4 <itoa+0x3a>
 8e0:	5d e2       	ldi	r21, 0x2D	; 45
 8e2:	51 93       	st	Z+, r21
 8e4:	10 82       	st	Z, r1
 8e6:	c9 01       	movw	r24, r18
 8e8:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <strrev>

000008ec <__mulhi_const_10>:
 8ec:	7a e0       	ldi	r23, 0x0A	; 10
 8ee:	97 9f       	mul	r25, r23
 8f0:	90 2d       	mov	r25, r0
 8f2:	87 9f       	mul	r24, r23
 8f4:	80 2d       	mov	r24, r0
 8f6:	91 0d       	add	r25, r1
 8f8:	11 24       	eor	r1, r1
 8fa:	08 95       	ret

000008fc <strrev>:
 8fc:	dc 01       	movw	r26, r24
 8fe:	fc 01       	movw	r30, r24
 900:	67 2f       	mov	r22, r23
 902:	71 91       	ld	r23, Z+
 904:	77 23       	and	r23, r23
 906:	e1 f7       	brne	.-8      	; 0x900 <__stack+0x1>
 908:	32 97       	sbiw	r30, 0x02	; 2
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
 90c:	7c 91       	ld	r23, X
 90e:	6d 93       	st	X+, r22
 910:	70 83       	st	Z, r23
 912:	62 91       	ld	r22, -Z
 914:	ae 17       	cp	r26, r30
 916:	bf 07       	cpc	r27, r31
 918:	c8 f3       	brcs	.-14     	; 0x90c <__stack+0xd>
 91a:	08 95       	ret

0000091c <__udivmodhi4>:
 91c:	aa 1b       	sub	r26, r26
 91e:	bb 1b       	sub	r27, r27
 920:	51 e1       	ldi	r21, 0x11	; 17
 922:	07 c0       	rjmp	.+14     	; 0x932 <__udivmodhi4_ep>

00000924 <__udivmodhi4_loop>:
 924:	aa 1f       	adc	r26, r26
 926:	bb 1f       	adc	r27, r27
 928:	a6 17       	cp	r26, r22
 92a:	b7 07       	cpc	r27, r23
 92c:	10 f0       	brcs	.+4      	; 0x932 <__udivmodhi4_ep>
 92e:	a6 1b       	sub	r26, r22
 930:	b7 0b       	sbc	r27, r23

00000932 <__udivmodhi4_ep>:
 932:	88 1f       	adc	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	5a 95       	dec	r21
 938:	a9 f7       	brne	.-22     	; 0x924 <__udivmodhi4_loop>
 93a:	80 95       	com	r24
 93c:	90 95       	com	r25
 93e:	bc 01       	movw	r22, r24
 940:	cd 01       	movw	r24, r26
 942:	08 95       	ret

00000944 <_exit>:
 944:	f8 94       	cli

00000946 <__stop_program>:
 946:	ff cf       	rjmp	.-2      	; 0x946 <__stop_program>
